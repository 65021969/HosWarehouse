"use client";
import { useState, useEffect } from "react";
import styles from "./page.module.css";
import Link from "next/link";
import { connectSocket, disconnectSocket } from "../../utils/socket";
import axiosInstance from "../../utils/axiosInstance";

const mapStatusToThai = (status) => {
  switch (status) {
    case 'waiting_approval':
      return '‡∏£‡∏≠‡∏Å‡∏≤‡∏£‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥';
    case 'approved_all':
      return '‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î';
    case 'rejected_all':
      return '‡∏õ‡∏è‡∏¥‡πÄ‡∏™‡∏ò‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î';
    case 'approved':
      return '‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥‡∏ö‡∏≤‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£';
    case 'rejected':
      return '‡∏õ‡∏è‡∏¥‡πÄ‡∏™‡∏ò‡∏ö‡∏≤‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£';
    default:
      return status;
  }
};


export default function ApprovalRequest() {
  const [requests, setRequests] = useState([]);
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState(null);

  // ‡∏ï‡∏±‡∏ß‡∏Å‡∏£‡∏≠‡∏á‡πÅ‡∏•‡∏∞‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤
  const [filter, setFilter] = useState("");
  const [category, setCategory] = useState("");
  const [unit, setUnit] = useState("");
  const [storage, setStorage] = useState("");

  // pagination
  const [currentPage, setCurrentPage] = useState(1);
  const itemsPerPage = 10;

  const fetchRequests = async () => {
    setLoading(true);
    setError(null);
    try {
      const res = await axiosInstance.get("/requests?status=waiting_approval,approved_all,rejected_all");
      setRequests(res.data);
    } catch (err) {
      setError("‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•");
      console.error(err);
    }
    setLoading(false);
  };

  // ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å backend
  // ‡πÇ‡∏´‡∏•‡∏î‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÅ‡∏£‡∏Å
  useEffect(() => {
    fetchRequests();
  }, []);

  // ‡∏ü‡∏±‡∏á‡∏à‡∏≤‡∏Å socket
  useEffect(() => {
    const socket = connectSocket();

    socket.on("requestUpdated", () => {
      console.log("üì° ‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö request ‡πÉ‡∏´‡∏°‡πà‡πÅ‡∏ö‡∏ö‡πÄ‡∏£‡∏µ‡∏¢‡∏•‡πÑ‡∏ó‡∏°‡πå");
      fetchRequests(); // ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡∏°‡πà
    });

    return () => {
      disconnectSocket();
    };
  }, []);



  // ‡∏Å‡∏£‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏≤‡∏°‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç (‡∏™‡∏°‡∏°‡∏ï‡∏¥‡πÉ‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏°‡∏µ field category, unit, storage, name)
  const filteredRequests = requests.filter((item) => {
    return (
      (category === "" || item.category === category) &&
      (unit === "" || item.unit === unit) &&
      (storage === "" || item.storage === storage) &&
      (filter === "" ||
        item.name?.toLowerCase().includes(filter.toLowerCase()) ||
        item.department?.toLowerCase().includes(filter.toLowerCase()))
    );
  });

  // ‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏ö‡πà‡∏á‡∏´‡∏ô‡πâ‡∏≤
  const currentItems = filteredRequests.slice(
    (currentPage - 1) * itemsPerPage,
    currentPage * itemsPerPage
  );

  const handlePrevPage = () => {
    if (currentPage > 1) setCurrentPage(currentPage - 1);
  };

  const handleNextPage = () => {
    if (currentPage * itemsPerPage < filteredRequests.length)
      setCurrentPage(currentPage + 1);
  };

  // ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏°‡∏∑‡πà‡∏≠ filter ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô (optional)
  useEffect(() => {
    setCurrentPage(1);
  }, [filter, category, unit, storage]);

  return (
    <div className={styles.mainHome}>
      <div className={styles.infoContainer}>
        <div className={styles.cardHeader}>
          <h1>‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÄ‡∏ö‡∏¥‡∏Å ‡∏¢‡∏∑‡∏°</h1>
        </div>

        {/* ‡∏ï‡∏±‡∏ß‡∏Å‡∏£‡∏≠‡∏á */}
        <div className={styles.filterContainer}>
          <div className={styles.filterGroup}>
            <label htmlFor="category" className={styles.filterLabel}>
              ‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà:
            </label>
            <select
              id="category"
              className={styles.filterSelect}
              value={category}
              onChange={(e) => setCategory(e.target.value)}
            >
              <option value="">‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà</option>
              <option value="‡∏¢‡∏≤">‡∏¢‡∏≤</option>
              <option value="‡πÄ‡∏ß‡∏ä‡∏†‡∏±‡∏ì‡∏ë‡πå">‡πÄ‡∏ß‡∏ä‡∏†‡∏±‡∏ì‡∏ë‡πå</option>
              <option value="‡∏Ñ‡∏£‡∏∏‡∏†‡∏±‡∏ì‡∏ë‡πå">‡∏Ñ‡∏£‡∏∏‡∏†‡∏±‡∏ì‡∏ë‡πå</option>
              <option value="‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå‡∏ó‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏û‡∏ó‡∏¢‡πå">‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå‡∏ó‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏û‡∏ó‡∏¢‡πå</option>
              <option value="‡∏Ç‡∏≠‡∏á‡πÉ‡∏ä‡πâ‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ">‡∏Ç‡∏≠‡∏á‡πÉ‡∏ä‡πâ‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ</option>
            </select>
          </div>

          <div className={styles.filterGroup}>
            <label htmlFor="unit" className={styles.filterLabel}>
              ‡∏´‡∏ô‡πà‡∏ß‡∏¢:
            </label>
            <select
              id="unit"
              className={styles.filterSelect}
              value={unit}
              onChange={(e) => setUnit(e.target.value)}
            >
              <option value="">‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏´‡∏ô‡πà‡∏ß‡∏¢</option>
              <option value="‡∏Ç‡∏ß‡∏î">‡∏Ç‡∏ß‡∏î</option>
              <option value="‡πÅ‡∏ú‡∏á">‡πÅ‡∏ú‡∏á</option>
              <option value="‡∏ä‡∏∏‡∏î">‡∏ä‡∏∏‡∏î</option>
              <option value="‡∏ä‡∏¥‡πâ‡∏ô">‡∏ä‡∏¥‡πâ‡∏ô</option>
            </select>
          </div>

          <div className={styles.filterGroup}>
            <label htmlFor="storage" className={styles.filterLabel}>
              ‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏à‡∏±‡∏î‡πÄ‡∏Å‡πá‡∏ö:
            </label>
            <select
              id="storage"
              className={styles.filterSelect}
              value={storage}
              onChange={(e) => setStorage(e.target.value)}
            >
              <option value="">‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏à‡∏±‡∏î‡πÄ‡∏Å‡πá‡∏ö</option>
              <option value="‡∏´‡πâ‡∏≠‡∏á‡πÄ‡∏Å‡πá‡∏ö‡∏¢‡∏≤">‡∏´‡πâ‡∏≠‡∏á‡πÄ‡∏Å‡πá‡∏ö‡∏¢‡∏≤</option>
              <option value="‡∏Ñ‡∏•‡∏±‡∏á‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤">‡∏Ñ‡∏•‡∏±‡∏á‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤</option>
              <option value="‡∏´‡πâ‡∏≠‡∏á‡πÄ‡∏ß‡∏ä‡∏†‡∏±‡∏ì‡∏ë‡πå">‡∏´‡πâ‡∏≠‡∏á‡πÄ‡∏ß‡∏ä‡∏†‡∏±‡∏ì‡∏ë‡πå</option>
            </select>
          </div>

          {/* ‡∏ä‡πà‡∏≠‡∏á‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤ */}
          <div className={styles.filterGroupSearch}>
            <label htmlFor="filter" className={styles.filterLabel}>
              ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•:
            </label>
            <input
              type="text"
              id="filter"
              className={styles.filterInput}
              value={filter}
              onChange={(e) => setFilter(e.target.value)}
              placeholder="‡∏Å‡∏£‡∏≠‡∏Å‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤..."
            />
          </div>
        </div>

        {/* ‡πÅ‡∏ñ‡∏ö‡∏´‡∏±‡∏ß‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏•‡πâ‡∏≤‡∏¢ Excel */}
        <div className={`${styles.tableGrid} ${styles.tableHeader}`}>
          <div className={styles.headerItem}>No.</div>
          <div className={styles.headerItem}>‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà</div>
          <div className={styles.headerItem}>‡πÄ‡∏ß‡∏•‡∏≤</div>
          <div className={styles.headerItem}>‡∏ú‡∏π‡πâ‡∏Ç‡∏≠‡πÄ‡∏ö‡∏¥‡∏Å</div>
          <div className={styles.headerItem}>‡πÅ‡∏ú‡∏ô‡∏Å</div>
          <div className={styles.headerItem}>‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£</div>
          <div className={styles.headerItem}>‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó</div>
          <div className={styles.headerItem}>‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞</div>
          <div className={styles.headerItem}>‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö</div>
        </div>

        {/* ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô‡∏ï‡∏≤‡∏£‡∏≤‡∏á */}
        <div className={styles.inventory}>
          {loading ? (
            <p>‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•...</p>
          ) : error ? (
            <p style={{ color: "red" }}>{error}</p>
          ) : currentItems.length === 0 ? (
            <p>‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç</p>
          ) : (
            currentItems.map((item, index) => (
              <div
                className={`${styles.tableGrid} ${styles.tableRow}`}
                key={item.request_id}
              >
                <div className={styles.tableCell}>
                  {(currentPage - 1) * itemsPerPage + index + 1}
                </div>
                <div className={styles.tableCell}>
                  {new Date(item.request_date).toLocaleDateString("th-TH")}
                </div>
                <div className={styles.tableCell}>
                  {new Date(item.request_date).toLocaleTimeString("th-TH", {
                    hour: "2-digit",
                    minute: "2-digit",
                  })}
                </div>
                <div className={styles.tableCell}>{item.user_name}</div>
                <div className={styles.tableCell}>{item.department}</div>
                <div className={styles.tableCell}>{item.item_count}</div>
                <div className={styles.tableCell}>{item.request_types}</div>
                <div className={styles.tableCell}>
                  <div className={styles.tableCell}>
                    {mapStatusToThai(item.request_status)}
                  </div>
                </div>
                <div className={styles.tableCell}>
                  <Link href={`/manage/approvalDetail/${item.request_id}`}>
                    <button className={styles.actionButton}>‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î</button>
                  </Link>
                </div>
              </div>
            ))
          )}
        </div>

        {/* ‡∏õ‡∏∏‡πà‡∏°‡πÅ‡∏ö‡πà‡∏á‡∏´‡∏ô‡πâ‡∏≤ */}
        <div className={styles.pagination}>
          <button
            className={styles.prevButton}
            onClick={handlePrevPage}
            disabled={currentPage === 1}
          >
            ‡∏´‡∏ô‡πâ‡∏≤‡∏Å‡πà‡∏≠‡∏ô‡∏´‡∏ô‡πâ‡∏≤
          </button>
          <button
            className={styles.nextButton}
            onClick={handleNextPage}
            disabled={currentPage * itemsPerPage >= filteredRequests.length}
          >
            ‡∏´‡∏ô‡πâ‡∏≤‡∏ñ‡∏±‡∏î‡πÑ‡∏õ
          </button>
        </div>
      </div>
    </div>
  );
}
