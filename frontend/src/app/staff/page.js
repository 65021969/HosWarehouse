"use client";
import { useEffect, useState, useContext, useMemo, useRef } from "react";
import { useRouter } from "next/navigation";
import styles from "./page.module.css";
import { CartContext } from "./context/CartContext";
import { toast } from "react-toastify";
import { io } from "socket.io-client";
import Image from "next/image";

export default function InventoryWithdraw() {
  const router = useRouter();
  const { addToCart } = useContext(CartContext);

  const socketRef = useRef(null);

  // Modal
  const [actionType, setActionType] = useState(""); // "withdraw" ‡∏´‡∏£‡∏∑‡∏≠ "borrow"
  const [showModal, setShowModal] = useState(false);
  const [selectedItem, setSelectedItem] = useState(null);
  const [inputQuantity, setInputQuantity] = useState(1);

  // ‡∏ï‡∏±‡∏ß‡∏Å‡∏£‡∏≠‡∏á
  const [filter, setFilter] = useState("");
  const [category, setCategory] = useState("");
  const [unit, setUnit] = useState("");
  const [storage, setStorage] = useState("");

  // ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÅ‡∏•‡∏∞‡πÅ‡∏ö‡πà‡∏á‡∏´‡∏ô‡πâ‡∏≤
  const [allItems, setAllItems] = useState([]);
  const [currentPage, setCurrentPage] = useState(1);
  const itemsPerPage = 8;

  useEffect(() => {
    socketRef.current = io("http://localhost:5000");

    socketRef.current.on("connect", () => {
      console.log("üü¢ Connected to WebSocket server");
      socketRef.current.emit("requestInventoryData");
    });

    socketRef.current.on("itemsData", (items) => {
      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏£‡∏±‡∏ö‡∏°‡∏≤ ‡∏Å‡∏£‡∏≠‡∏á‡∏Ñ‡πà‡∏≤‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡πá‡∏ô null ‡∏´‡∏£‡∏∑‡∏≠ undefined
      if (Array.isArray(items)) {
        const filteredValidItems = items.filter((item) => item != null);
        setAllItems(filteredValidItems);
      } else {
        setAllItems([]);
      }
    });

    socketRef.current.on("disconnect", () => {
      console.log("üî¥ Disconnected from WebSocket server");
    });

    return () => {
      if (socketRef.current) {
        socketRef.current.disconnect();
        console.log("üî¥ Socket disconnected");
      }
    };
  }, []);

  // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÅ‡∏™‡∏î‡∏á‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û ‡∏°‡∏µ fallback ‡∏£‡∏π‡∏õ default
  function ItemImage({ item_img, alt }) {
    const defaultImg = "http://localhost:5000/public/defaults/landscape.png";

    const [imgSrc, setImgSrc] = useState(
      item_img && typeof item_img === "string" && item_img.trim() !== ""
        ? `http://localhost:5000/uploads/${item_img}`
        : defaultImg
    );

    return (
      <Image
        src={imgSrc}
        alt={alt || "‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ñ‡∏≥‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢‡∏†‡∏≤‡∏û"}
        width={70}
        height={70}
        style={{ objectFit: "cover" }}
        onError={() => setImgSrc(defaultImg)}
      />
    );
  }

  // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏Å‡∏£‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
  const filteredItems = useMemo(() => {
    return allItems.filter((item) => {
      if (!item) return false; // skip null/undefined

      const matchCategory = category ? item.item_category === category : true;
      const matchUnit = unit ? item.item_unit === unit : true;
      const matchStorage = storage ? item.item_location === storage : true;
      const matchFilterText = filter
        ? item.item_name?.toLowerCase().includes(filter.toLowerCase())
        : true;

      return matchCategory && matchUnit && matchStorage && matchFilterText;
    });
  }, [allItems, category, unit, storage, filter]);

  // ‡πÅ‡∏ö‡πà‡∏á‡∏´‡∏ô‡πâ‡∏≤‡∏à‡∏≤‡∏Å filteredItems
  const currentItems = useMemo(() => {
    const start = (currentPage - 1) * itemsPerPage;
    return filteredItems.slice(start, start + itemsPerPage);
  }, [filteredItems, currentPage, itemsPerPage]);

  // ‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏´‡∏ô‡πâ‡∏≤
  const handlePrevPage = () => {
    if (currentPage > 1) setCurrentPage(currentPage - 1);
  };

  const handleNextPage = () => {
    if (currentPage * itemsPerPage < filteredItems.length) {
      setCurrentPage(currentPage + 1);
    }
  };

  // ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏°‡∏∑‡πà‡∏≠ filter ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô
  useEffect(() => {
    setCurrentPage(1);
  }, [filter, category, unit, storage]);

  // Modal ‡πÄ‡∏õ‡∏¥‡∏î-‡∏õ‡∏¥‡∏î ‡πÅ‡∏•‡∏∞‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏Ç‡πâ‡∏≤‡∏ï‡∏∞‡∏Å‡∏£‡πâ‡∏≤
  const handleWithdrawClick = (item) => {
    setSelectedItem(item);
    setActionType("withdraw");
    setInputQuantity(1);
    setShowModal(true);
  };

  const handleBorrowClick = (item) => {
    setSelectedItem(item);
    setActionType("borrow");
    setInputQuantity(1);
    setShowModal(true);
  };

  const closeModal = () => {
    setShowModal(false);
    setSelectedItem(null);
    setActionType("");
  };

  const handleConfirm = () => {
    if (!inputQuantity || inputQuantity <= 0) {
      toast.error("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÉ‡∏´‡πâ‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á");
      return;
    }
    if (!selectedItem) {
      toast.error("‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤");
      return;
    }
    if (inputQuantity > selectedItem.item_qty) {
      toast.error("‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÑ‡∏°‡πà‡πÄ‡∏û‡∏µ‡∏¢‡∏á‡∏û‡∏≠");
      return;
    }
    addToCart({
      id: selectedItem.item_id,
      item_img: selectedItem.item_img
        ? `http://localhost:5000/uploads/${selectedItem.item_img}`
        : "/defaults/landscape.png",
      number: selectedItem.item_number,
      code: getItemCode(selectedItem), // ‚úÖ ‡πÉ‡∏ä‡πâ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ô‡∏µ‡πâ
      name: selectedItem.item_name,
      quantity: inputQuantity,
      unit: selectedItem.item_unit,
      type: selectedItem.item_category,
      location: selectedItem.item_location,
      action: actionType,
    });


    toast.success("‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡∏ï‡∏∞‡∏Å‡∏£‡πâ‡∏≤‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß");
    closeModal();
  };

  const getItemCode = (item) => {
    if (!item) return "-";
    switch (item.item_category) {
      case "medicine":
        return item.med_code || "-";
      case "medsup":
        return item.medsup_code || "-";
      case "equipment":
        return item.equip_code || "-";
      case "meddevice":
        return item.meddevice_code || "-";
      case "general":
        return item.gen_code || "-";
      default:
        return "-";
    }
  };
  const translateCategory = (cat) => {
    switch (cat) {
      case "medicine":
        return "‡∏¢‡∏≤";
      case "medsup":
        return "‡πÄ‡∏ß‡∏ä‡∏†‡∏±‡∏ì‡∏ë‡πå";
      case "equipment":
        return "‡∏Ñ‡∏£‡∏∏‡∏†‡∏±‡∏ì‡∏ë‡πå";
      case "meddevice":
        return "‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå‡∏ó‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏û‡∏ó‡∏¢‡πå";
      case "general":
        return "‡∏Ç‡∏≠‡∏á‡πÉ‡∏ä‡πâ‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ";
      default:
        return cat;
    }
  };
  return (
    <div className={styles.mainHome}>
      {/* Modal */}
      {showModal && selectedItem && (
        <div className={styles.modalOverlay}>
          <div className={styles.modal}>
            <h2 className={styles.modalTitle}>
              ‡∏ó‡∏≥‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£ {actionType === "withdraw" ? "‡πÄ‡∏ö‡∏¥‡∏Å" : "‡∏¢‡∏∑‡∏°"}
            </h2>

            <div className={styles.modalContentRow} style={{ display: "flex", gap: "1rem" }}>
              <ItemImage
                item_img={selectedItem.item_img || ""}
                alt={selectedItem.item_name || "‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ä‡∏∑‡πà‡∏≠"}
              />

              <div className={styles.modalDetails}>
                <div>
                  <strong>‡∏ä‡∏∑‡πà‡∏≠:</strong> {selectedItem.item_name || "-"}
                </div>
                <div>
                  <strong>‡∏£‡∏´‡∏±‡∏™‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤:</strong> {selectedItem.item_id || "-"}
                </div>
                <div>
                  <strong>‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà:</strong> {translateCategory(selectedItem.item_category) || "-"}
                </div>
                <div>
                  <strong>‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠:</strong> {selectedItem.item_qty || 0}{" "}
                  {selectedItem.item_unit || ""}
                </div>
              </div>
            </div>

            <div className={styles.modalForm}>
              <label htmlFor="quantity">‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£</label>
              <input
                id="quantity"
                type="number"
                className={styles.modalInput}
                min={1}
                max={selectedItem.item_qty || 1}
                value={inputQuantity}
                onChange={(e) => setInputQuantity(Number(e.target.value))}
              />
            </div>

            <div className={styles.modalActions}>
              <button className={styles.modalConfirm} onClick={handleConfirm}>
                ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å
              </button>
              <button className={styles.modalCancel} onClick={closeModal}>
                ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å
              </button>
            </div>
          </div>
        </div>
      )}

      {/* ‡πÅ‡∏ñ‡∏ö‡πÄ‡∏°‡∏ô‡∏π */}
      <div className={styles.bar}>
        <ul className={styles.navList}>
          <li className={styles.navItem}>‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏¢‡∏≠‡∏î‡∏Ñ‡∏á‡∏Ñ‡∏•‡∏±‡∏á</li>
          <li className={styles.navItem}>‡∏¢‡∏≤</li>
          <li className={styles.navItem}>‡πÄ‡∏ß‡∏ä‡∏†‡∏±‡∏ì‡∏ë‡πå</li>
          <li className={styles.navItem}>‡∏Ñ‡∏£‡∏∏‡∏†‡∏±‡∏ì‡∏ë‡πå</li>
          <li className={styles.navItem}>‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå‡∏ó‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏û‡∏ó‡∏¢‡πå</li>
          <li className={styles.navItem}>‡∏Ç‡∏≠‡∏á‡πÉ‡∏ä‡πâ‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ</li>
        </ul>
      </div>

      {/* ‡∏ï‡∏±‡∏ß‡∏Å‡∏£‡∏≠‡∏á */}
      <div className={styles.infoContainer}>
        <div className={styles.filterContainer}>
          <div className={styles.filterGroup}>
            <select
              id="category"
              className={styles.filterSelect}
              value={category}
              onChange={(e) => setCategory(e.target.value)}
            >
              <option value="">‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà</option>
              <option value="medicine">‡∏¢‡∏≤</option>
              <option value="medsup">‡πÄ‡∏ß‡∏ä‡∏†‡∏±‡∏ì‡∏ë‡πå</option>
              <option value="equipment">‡∏Ñ‡∏£‡∏∏‡∏†‡∏±‡∏ì‡∏ë‡πå</option>
              <option value="meddevice">‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå‡∏ó‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏û‡∏ó‡∏¢‡πå</option>
              <option value="general">‡∏Ç‡∏≠‡∏á‡πÉ‡∏ä‡πâ‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ</option>
            </select>
          </div>

          <div className={styles.filterGroup}>
            <select
              id="unit"
              className={styles.filterSelect}
              value={unit}
              onChange={(e) => setUnit(e.target.value)}
            >
              <option value="">‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏´‡∏ô‡πà‡∏ß‡∏¢</option>
              <option value="‡∏Ç‡∏ß‡∏î">‡∏Ç‡∏ß‡∏î</option>
              <option value="‡πÅ‡∏ú‡∏á">‡πÅ‡∏ú‡∏á</option>
              <option value="‡∏ä‡∏∏‡∏î">‡∏ä‡∏∏‡∏î</option>
              <option value="‡∏ä‡∏¥‡πâ‡∏ô">‡∏ä‡∏¥‡πâ‡∏ô</option>
              <option value="‡∏Å‡∏•‡πà‡∏≠‡∏á">‡∏Å‡∏•‡πà‡∏≠‡∏á</option>
            </select>
          </div>

          <div className={styles.filterGroup}>
            <select
              id="storage"
              className={styles.filterSelect}
              value={storage}
              onChange={(e) => setStorage(e.target.value)}
            >
              <option value="">‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏à‡∏±‡∏î‡πÄ‡∏Å‡πá‡∏ö</option>
              <option value="‡∏´‡πâ‡∏≠‡∏á‡πÄ‡∏Å‡πá‡∏ö‡∏¢‡∏≤">‡∏´‡πâ‡∏≠‡∏á‡πÄ‡∏Å‡πá‡∏ö‡∏¢‡∏≤</option>
              <option value="‡∏Ñ‡∏•‡∏±‡∏á‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤">‡∏Ñ‡∏•‡∏±‡∏á‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤</option>
              <option value="‡∏´‡πâ‡∏≠‡∏á‡πÄ‡∏ß‡∏ä‡∏†‡∏±‡∏ì‡∏ë‡πå">‡∏´‡πâ‡∏≠‡∏á‡πÄ‡∏ß‡∏ä‡∏†‡∏±‡∏ì‡∏ë‡πå</option>
              <option value="‡∏´‡πâ‡∏≠‡∏á1">‡∏´‡πâ‡∏≠‡∏á1</option>
              <option value="1">1</option>
            </select>
          </div>

          <div className={styles.filterGroupSearch}>
            <input
              type="text"
              id="filter"
              className={styles.filterInput}
              value={filter}
              onChange={(e) => setFilter(e.target.value)}
              placeholder="‡∏Å‡∏£‡∏≠‡∏Å‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤..."
            />
          </div>
        </div>

        {/* ‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏´‡∏±‡∏ß‡∏Ç‡πâ‡∏≠ */}
        <div className={`${styles.tableGrid} ${styles.tableHeader}`}>
          <div className={styles.headerItem}>‡∏•‡∏≥‡∏î‡∏±‡∏ö</div>
          <div className={styles.headerItem}>‡∏£‡∏´‡∏±‡∏™</div>
          <div className={styles.headerItem}>‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û</div>
          <div className={styles.headerItem}>‡∏ä‡∏∑‡πà‡∏≠</div>
          <div className={styles.headerItem}>‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà</div>
          <div className={styles.headerItem}>‡∏à‡∏≥‡∏ô‡∏ß‡∏ô</div>
          <div className={styles.headerItem}>‡∏´‡∏ô‡πà‡∏ß‡∏¢</div>
          <div className={styles.headerItem}>‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞</div>
          <div className={styles.headerItem}>‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏à‡∏±‡∏î‡πÄ‡∏Å‡πá‡∏ö</div>
          <div className={styles.headerItem}>‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î</div>
          <div className={styles.headerItem}>‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£</div>
        </div>

        {/* ‡πÅ‡∏™‡∏î‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£ */}
        <div className={styles.inventory}>
          {currentItems && currentItems.length > 0 ? (
            currentItems.map((item, index) =>
              item ? (
                <div
                  className={`${styles.tableGrid} ${styles.tableRow}`}
                  key={item.item_id || index}
                >
                  {/* ‡πÅ‡∏™‡∏î‡∏á‡∏•‡∏≥‡∏î‡∏±‡∏ö */}
                  <div className={styles.tableCell}>
                    {index + 1 + (currentPage - 1) * itemsPerPage}
                  </div>
                  {/* ‡πÅ‡∏™‡∏î‡∏á‡∏£‡∏´‡∏±‡∏™ */}
                  <div className={styles.tableCell}>{getItemCode(item)}</div>
                  <div className={`${styles.tableCell} ${styles.imageCell}`}>
                    <ItemImage
                      item_img={item.item_img || ""}
                      alt={item.item_name || "‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ä‡∏∑‡πà‡∏≠"}
                    />
                  </div>
                  <div className={styles.tableCell}>{item.item_name || "-"}</div>
                  <div className={styles.tableCell}>
                    {translateCategory(item.item_category)}
                  </div>
                  <div className={styles.tableCell}>{item.item_qty || 0}</div>
                  <div className={styles.tableCell}>{item.item_unit || "-"}</div>
                  <div className={styles.tableCell}>{item.item_status || "-"}</div>
                  <div className={styles.tableCell}>{item.item_location || "-"}</div>
                  <div className={styles.tableCell}>
                    {item.item_update
                      ? new Date(item.item_update).toLocaleDateString()
                      : ""}
                  </div>
                  <div className={`${styles.tableCell} ${styles.centerCell}`}>
                    <button
                      className={`${styles.actionButton} ${styles.withdrawButton}`}
                      onClick={() => handleWithdrawClick(item)}
                    >
                      ‡πÄ‡∏ö‡∏¥‡∏Å
                    </button>
                    <button
                      className={`${styles.actionButton} ${styles.borrowButton}`}
                      onClick={() => handleBorrowClick(item)}
                    >
                      ‡∏¢‡∏∑‡∏°
                    </button>
                  </div>
                </div>
              ) : null
            )
          ) : (
            <div style={{ padding: "20px", textAlign: "center" }}>‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•</div>
          )}
        </div>

        {/* pagination */}
        <div className={styles.pagination}>
          <button
            className={styles.prevButton}
            onClick={handlePrevPage}
            disabled={currentPage === 1}
          >
            ‡∏´‡∏ô‡πâ‡∏≤‡∏Å‡πà‡∏≠‡∏ô‡∏´‡∏ô‡πâ‡∏≤
          </button>
          <button
            className={styles.nextButton}
            onClick={handleNextPage}
            disabled={currentPage * itemsPerPage >= filteredItems.length}
          >
            ‡∏´‡∏ô‡πâ‡∏≤‡∏ñ‡∏±‡∏î‡πÑ‡∏õ
          </button>
        </div>
      </div>
    </div>
  );
}
