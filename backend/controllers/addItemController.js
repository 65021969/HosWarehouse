const fs = require('fs');
const path = require('path');
const addItemModel = require('../models/addItemModel');
const { pool } = require('../config/db');
const { getIO } = require('../socket');

function parseNullable(value) {
    return value?.trim() === '' ? null : value;
}

function parseNullableDate(value) {
    return value?.trim() === '' ? null : value;
}

function parseNullableInt(value) {
    const n = parseInt(value);
    return isNaN(n) ? 0 : n;
}

function parseNullableFloat(value) {
    const f = parseFloat(value);
    return isNaN(f) ? 0 : f;
}

function deleteUploadedFile(filePath) {
    if (filePath && fs.existsSync(filePath)) {
        fs.unlinkSync(filePath);
        console.log('üóëÔ∏è ‡∏•‡∏ö‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û:', filePath);
    }
}

exports.addNewItem = async (req, res) => {
    const file = req.file ? req.file.filename : null; // ‚úÖ ‡πÄ‡∏Å‡πá‡∏ö‡πÅ‡∏Ñ‡πà‡∏ä‡∏∑‡πà‡∏≠‡πÑ‡∏ü‡∏•‡πå
    try {
        console.log('BODY:', req.body);
        console.log('FILE:', req.file);

        const data = req.body;

        if (file) {
            data.item_image = file;
        }

        // ‡πÅ‡∏õ‡∏•‡∏á‡∏Ñ‡πà‡∏≤‡∏ß‡πà‡∏≤‡∏á‡πÄ‡∏õ‡πá‡∏ô null ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà
        data.item_expire_date = parseNullableDate(data.item_expire_date);
        data.item_order_date = parseNullableDate(data.item_order_date);

        // ‡πÅ‡∏õ‡∏•‡∏á‡∏Ñ‡πà‡∏≤‡∏ó‡∏µ‡πà‡∏Ñ‡∏ß‡∏£‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç
        data.item_qty = parseNullableInt(data.item_quantity);
        data.item_min = parseNullableInt(data.item_min);
        data.item_max = parseNullableInt(data.item_max);
        if (data.medsup_qty) data.medsup_qty = parseNullableInt(data.medsup_qty);
        if (data.medsup_price) data.medsup_price = parseNullableFloat(data.medsup_price);

        // ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏Ç‡∏≠‡∏á‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó
        data.med_exp = parseNullableDate(data.med_exp);
        data.medsup_expiry_date = parseNullableDate(data.medsup_expiry_date);
        data.equip_purchase_date = parseNullableDate(data.equip_purchase_date);
        data.equip_warranty_expire = parseNullableDate(data.equip_warranty_expire);
        data.equip_last_maintenance = parseNullableDate(data.equip_last_maintenance);

        const baseResult = await addItemModel.addBaseItem(data);
        if (!baseResult) {
            deleteUploadedFile(file);
            return res.status(400).json({ error: '‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô‡πÑ‡∏î‡πâ' });
        }

        const item_id = baseResult.item_id;
        const category = data.item_category;
        let detailResult;

        switch (category) {
            case 'medicine':
                detailResult = await addItemModel.insertMedicine(item_id, data);
                break;
            case 'medsup':
                detailResult = await addItemModel.insertMedsup(item_id, data);
                break;
            case 'equipment':
                detailResult = await addItemModel.insertEquipment(item_id, data);
                break;
            case 'meddevice':
                detailResult = await addItemModel.insertMedDevice(item_id, data);
                break;
            case 'general':
                detailResult = await addItemModel.insertGeneral(item_id, data);
                break;
            default:
                deleteUploadedFile(file);
                return res.status(400).json({ error: '‡πÑ‡∏°‡πà‡∏£‡∏π‡πâ‡∏à‡∏±‡∏Å‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏û‡∏±‡∏™‡∏î‡∏∏' });
        }

        if (!detailResult.success) {
            deleteUploadedFile(file);
            return res.status(400).json({ error: '‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏™‡∏£‡∏¥‡∏°‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à' });
        }
        // ‚úÖ ‡∏´‡∏•‡∏±‡∏á‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• inventory ‡πÉ‡∏´‡∏°‡πà ‡πÅ‡∏•‡∏∞‡∏™‡πà‡∏á‡∏ú‡πà‡∏≤‡∏ô socket
        const io = getIO(); // ‚úÖ
        const allItems = await require('../models/inventoryModel').getAllItemsDetailed(); // ‚úÖ
        io.emit('itemsData', allItems); // ‚úÖ ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• inventory ‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡∏ó‡∏∏‡∏Å client
        
        return res.status(201).json({
            success: true,
            item_id,
            message: '‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à'
        });

    } catch (error) {
        deleteUploadedFile(file);
        console.error('‚ùå ERROR:', error);
        res.status(500).json({
            error: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏†‡∏≤‡∏¢‡πÉ‡∏ô‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå',
            details: error.message
        });
    }
};
